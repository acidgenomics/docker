#!/usr/bin/env Rscript

# Quit and return non-zero status code on error.
options(
    error = quote(quit(status = 1L)),
    mc.cores = 3L,
    verbose = TRUE
)

# Parallelizing using `mcmapply()` below.
# requireNamespace("parallel")
# mapply <- parallel::mcmapply

# This will include the `--file` flag we want to match to get the script source.
args <- commandArgs(trailingOnly = FALSE)
# This will return only the positional arguments.
posArgs <- commandArgs(trailingOnly = TRUE)

# Get the script path from the command arguments.
fileFlag <- "--file="
fileArg <- args[grep(fileFlag, args)]
rscript <- sub(pattern = fileFlag, replacement = "", x = fileArg)
scriptDir <- normalizePath(dirname(rscript))
dockerDir <- dirname(scriptDir)

# Specify the image name as a positional argument.
image <- posArgs[[1L]]
imageDir <- file.path(dockerDir, image)
stopifnot(
    is.character(image),
    dir.exists(imageDir)
)
tags <- sort(list.dirs(path = imageDir, full.names = FALSE, recursive = FALSE))
stopifnot(length(tags) > 0L)

# Build the versioned images, defined by `Dockerfile` in the subdirectories.
mapply(
    tag = tags,
    MoreArgs = list(image = image),
    FUN = function(image, tag) {
        command <- paste(file.path(scriptDir, "build-image"), image, tag)
        print(command)
        system(command = command)
        print(paste(image, tag, "build was successful."))
    },
    USE.NAMES = FALSE,
    SIMPLIFY = FALSE
)

# Tag the most recent version as "latest".
print(paste("Tagging", image, tag, "as latest."))
tag <- tail(sort(tags), n = 1L)
command <- paste(file.path(scriptDir, "tag-latest"), image, tag)
print(command)
system(command = command)
