#!/usr/bin/env Rscript

## Build all tags for a specific image.
## Updated 2019-11-14.

## Quit and return non-zero status code on error.
options(
    error = quote(quit(status = 1L)),
    verbose = TRUE
)

## Enable parallelization.
requireNamespace("BiocParallel")
mapply <- BiocParallel::bpmapply

## This will include the `--file` flag we want to match for the script source.
args <- commandArgs(trailingOnly = FALSE)
## This will return only the positional arguments.
posArgs <- commandArgs(trailingOnly = TRUE)

## Get the script path from the command arguments.
fileFlag <- "--file="
fileArg <- args[grep(fileFlag, args)]
rscript <- sub(pattern = fileFlag, replacement = "", x = fileArg)
scriptDir <- normalizePath(dirname(rscript))
dockerDir <- dirname(scriptDir)

## Specify the image name as a positional argument.
image <- posArgs[[1L]]
imageDir <- file.path(dockerDir, image)
stopifnot(
    is.character(image),
    dir.exists(imageDir)
)
tags <- sort(list.dirs(path = imageDir, full.names = FALSE, recursive = FALSE))
stopifnot(length(tags) > 0L)

## Build the versioned images, defined by `Dockerfile` in the subdirectories.
mapply(
    tag = tags,
    MoreArgs = list(image = image),
    FUN = function(image, tag) {
        system2(
            command = file.path(scriptDir, "docker-build-image"),
            args = c(image, tag)
        )
    },
    USE.NAMES = FALSE,
    SIMPLIFY = FALSE
)

## Automatically tag Bioconductor release as "latest".
sourceTag <- grep(pattern = "release", x = tags, value = TRUE)
if (identical(length(sourceTag), 1L)) {
    destTag <- "latest"
    print(sprintf(
        "Tagging %s '%s' as '%s'.",
        image, sourceTag, destTag
    ))
    system2(
        command = file.path(scriptDir, "docker-tag"),
        args = c(image, sourceTag, destTag)
    )
}

## Prune Docker images.
# > print("Pruning Docker images.")
# > system2(
# >     command = "docker",
# >     args = c("system", "prune", "--all", "--force")
# > )
